name: BuildPoiNative

env:
  apiname: poi
  repo: devopsoh/api-poi
  acrreg: openhacklnc1acr
  acrsite: openhacklnc1acr.azurecr.io
  tenant: ${{ secrets.tenant }}
  RG: openhacklnc1rg
  AZURE_WEBAPP_NAME: openhacklnc1poinative   # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.' 
  artifact-name:  poiapp
  dotnetversion:  '2.1.x'

on:
  workflow_dispatch:
  push:
    branches: [ '*' ]
    paths: 
      - apis/poi/**  
      - .github/workflows/poi-build-native.yml
  pull_request:
    branches: [ master ]
    paths: 
      - apis/poi/**
      - .github/workflows/poi-build-native.yml



jobs:
  build_and_test_poi_native:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apis/poi

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # larry@LNC-SLaptop3:/mnt/c/Users/laclama/MyDev/1-OpenHack/DevOps2 Coaching Nov 2020/github/apis/poi$ dotnet nuget locals all -l
      # http-cache: /home/larry/.local/share/NuGet/v3-cache
      # global-packages: /home/larry/.nuget/packages/
      # temp: /tmp/NuGetScratch
      # plugins-cache: /home/larry/.local/share/NuGet/plugins-cache


      - name: Cache nuget cache
        uses: actions/cache@v2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-${{github.workflow}}nuget-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{github.workflow}}nuget-

      - name: Cache .NET cache
        uses: actions/cache@v2
        with:
          path: ~/.dotnet
          key: ${{ runner.os }}-${{github.workflow}}dotnet-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{github.workflow}}dotnet-


      - uses: actions/setup-dotnet@v1
        id: setupdotnet
        with:
          dotnet-version: ${{env.dotnetversion}} # SDK Version to use; 


      # - name: showcache
      #   run: dotnet nuget locals all -l


      - name: dotnet build, test, publish 
        # inherits working-directory: apis/poi
        run: |
          dotnet restore web/poi.csproj
          dotnet build --configuration Release 
          dotnet test --no-restore --verbosity normal tests/UnitTests  /p:CollectCoverage=true /p:CoverletOutput=lcov/ /p:CoverletOutputFormat=lcov
          dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/poiapp'

      - run: |  
          ls -l web 

      - name: create issue if build & test failed
        if: failure()
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        run: |
          title="${{ env.apiname }} Workflow ${{ github.run_number }} Failed! "
          body="${{ env.apiname }} Workflow Failure 
          Build Number: ${{ github.run_number }} 
          Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 
          SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
          gh issue create --title "$title" --body "$body"

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.artifact-name}}
          path: 'apis/poi/web/poiapp' # or path/to/artifact



  Deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs:   build_and_test_poi_native
    steps:     


    # - uses: actions/checkout@v2

    - uses: actions/download-artifact@v2
      with:
        name: ${{ env.artifact-name}}
        path: poiapp


    - run: ls -l  


    # azure/login requires a GH Secret named AZURE_CREDENTIALS
    # which is a json object of the format:
    # {
    # "clientId": "<GUID>",
    # "clientSecret": "<GUID>",
    # "subscriptionId": "<GUID>",
    # "tenantId": "<GUID>",
    # (...)
    # }

    - uses: azure/login@v1
      name: Azure Login
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} 

### NOTE:  MUST add service principal as contributor to web app (or RG)
    # - name: 'Deploy to Azure Web App for Container Staging Slot'
    #   uses: azure/webapps-deploy@v2
    #   with: 
    #     app-name: ${{ env.AZURE_WEBAPP_NAME }}
    #     package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/poiapp'
       # slot-name: staging


    - name: 'Deploy to Azure Web App Staging Slot'
      uses: azure/webapps-deploy@v2
      with: 
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        package: poiapp
       # slot-name: staging
      
    - name: create issue if deploy fails
      if: failure()
      env:
        GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
      run: |
        title="${{ env.apiname }} Workflow ${{ github.run_number }} Failed! "
        body="${{ env.apiname }} Workflow Failure  -- deploy to staging
        Build Number: ${{ github.run_number }} 
        Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} 
        SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})"
        gh issue create --title "$title" --body "$body"       

    # - name: Swap Slots
    #   run: >
    #     az webapp deployment slot swap -g ${{env.RG}} -n ${{ env.AZURE_WEBAPP_NAME }} 
    #     --slot staging  --target-slot production
    